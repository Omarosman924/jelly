services:
  # Backend API Service
  backend:
    build:
      context: ./Restaurant-Management
      dockerfile: Dockerfile
    container_name: restaurant-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
    expose:
      - "3000"
    volumes:
      - ./Restaurant-Management:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - redis
      - postgres

  # Next.js Frontend (Jellyfish)
  frontend-nextjs:
    build:
      context: ./jellyfish
      dockerfile: Dockerfile
    container_name: jellyfish-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    expose:
      - "3000"
    volumes:
      - ./jellyfish:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network

  # React+Vite Frontend (JellyfishManager)
  frontend-manager:
    build:
      context: ./jellyfishmaneger
      dockerfile: Dockerfile
    container_name: jellyfishmanager-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    ports:
      - "127.0.0.1:8080:80"
    expose:
      - "80"
    volumes:
      - ./jellyfishmaneger:/app
      - /app/node_modules
      - /app/dist
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "127.0.0.1:80:80"
      - "127.0.0.1:443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - app-network
    depends_on:
      - backend
      - frontend-nextjs
      - frontend-manager

  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: redis-server
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=restaurant_db
      - POSTGRES_USER=restaurant_user
      - POSTGRES_PASSWORD=restaurant_password
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

volumes:
  redis_data:
  postgres_data:

networks:
  app-network:
    driver: bridge