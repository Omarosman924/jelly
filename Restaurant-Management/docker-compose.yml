version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: restaurant_postgres
    environment:
      POSTGRES_DB: restaurant_db
      POSTGRES_USER: restaurant_user
      POSTGRES_PASSWORD: restaurant_password
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - restaurant_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U restaurant_user -d restaurant_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: restaurant_redis
    command: redis-server --requirepass restaurant_redis_password --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - restaurant_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Application (for production)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: restaurant_app
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://restaurant_user:restaurant_password@postgres:5432/restaurant_db
      REDIS_URL: redis://:restaurant_redis_password@redis:6379
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./certificates:/app/certificates
    networks:
      - restaurant_network
    restart: unless-stopped
    profiles:
      - production

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: restaurant_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certificates:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - app
    networks:
      - restaurant_network
    restart: unless-stopped
    profiles:
      - production

  # Redis Commander (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: restaurant_redis_commander
    hostname: redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:restaurant_redis_password
    depends_on:
      - redis
    networks:
      - restaurant_network
    profiles:
      - development

  # pgAdmin (Development)
  pgadmin:
    image: dpage/pgadmin4
    container_name: restaurant_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@restaurant.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - restaurant_network
    profiles:
      - development

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus
    container_name: restaurant_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - restaurant_network
    profiles:
      - monitoring

  # Grafana (Optional)
  grafana:
    image: grafana/grafana
    container_name: restaurant_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - restaurant_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  restaurant_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16